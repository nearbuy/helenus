--- gen-nodejs/cassandra_types.js	2017-01-26 13:47:12.381570812 -0800
+++ cassandra_types.js	2017-01-26 13:49:07.321828457 -0800
@@ -3,7 +3,7 @@
 //
 // DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 //
-var Thrift = require('thrift').Thrift;
+var Thrift = require('helenus-thrift').Thrift;
 var ttypes = module.exports = {};
 ttypes.ConsistencyLevel = {
 'ONE' : 1,
@@ -113,22 +113,22 @@
 
 Column.prototype.write = function(output) {
   output.writeStructBegin('Column');
-  if (this.name) {
+  if (this.name !== null) {
     output.writeFieldBegin('name', Thrift.Type.STRING, 1);
     output.writeString(this.name);
     output.writeFieldEnd();
   }
-  if (this.value) {
+  if (this.value !== null) {
     output.writeFieldBegin('value', Thrift.Type.STRING, 2);
     output.writeString(this.value);
     output.writeFieldEnd();
   }
-  if (this.timestamp) {
+  if (this.timestamp !== null) {
     output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
     output.writeI64(this.timestamp);
     output.writeFieldEnd();
   }
-  if (this.ttl) {
+  if (this.ttl !== null) {
     output.writeFieldBegin('ttl', Thrift.Type.I32, 4);
     output.writeI32(this.ttl);
     output.writeFieldEnd();
@@ -1051,22 +1051,22 @@
 
 SliceRange.prototype.write = function(output) {
   output.writeStructBegin('SliceRange');
-  if (this.start) {
+  if (this.start !== null) {
     output.writeFieldBegin('start', Thrift.Type.STRING, 1);
     output.writeString(this.start);
     output.writeFieldEnd();
   }
-  if (this.finish) {
+  if (this.finish !== null) {
     output.writeFieldBegin('finish', Thrift.Type.STRING, 2);
     output.writeString(this.finish);
     output.writeFieldEnd();
   }
-  if (this.reversed) {
+  if (this.reversed !== null) {
     output.writeFieldBegin('reversed', Thrift.Type.BOOL, 3);
     output.writeBool(this.reversed);
     output.writeFieldEnd();
   }
-  if (this.count) {
+  if (this.count !== null) {
     output.writeFieldBegin('count', Thrift.Type.I32, 4);
     output.writeI32(this.count);
     output.writeFieldEnd();
@@ -1232,7 +1232,7 @@
     output.writeString(this.column_name);
     output.writeFieldEnd();
   }
-  if (this.op) {
+  if (this.op !== null) {
     output.writeFieldBegin('op', Thrift.Type.I32, 2);
     output.writeI32(this.op);
     output.writeFieldEnd();
@@ -1337,12 +1337,12 @@
     output.writeListEnd();
     output.writeFieldEnd();
   }
-  if (this.start_key) {
+  if (this.start_key !== null) {
     output.writeFieldBegin('start_key', Thrift.Type.STRING, 2);
     output.writeString(this.start_key);
     output.writeFieldEnd();
   }
-  if (this.count) {
+  if (this.count !== null) {
     output.writeFieldBegin('count', Thrift.Type.I32, 3);
     output.writeI32(this.count);
     output.writeFieldEnd();
@@ -1461,27 +1461,27 @@
 
 KeyRange.prototype.write = function(output) {
   output.writeStructBegin('KeyRange');
-  if (this.start_key) {
+  if (this.start_key !== null) {
     output.writeFieldBegin('start_key', Thrift.Type.STRING, 1);
     output.writeString(this.start_key);
     output.writeFieldEnd();
   }
-  if (this.end_key) {
+  if (this.end_key !== null) {
     output.writeFieldBegin('end_key', Thrift.Type.STRING, 2);
     output.writeString(this.end_key);
     output.writeFieldEnd();
   }
-  if (this.start_token) {
+  if (this.start_token !== null) {
     output.writeFieldBegin('start_token', Thrift.Type.STRING, 3);
     output.writeString(this.start_token);
     output.writeFieldEnd();
   }
-  if (this.end_token) {
+  if (this.end_token !== null) {
     output.writeFieldBegin('end_token', Thrift.Type.STRING, 4);
     output.writeString(this.end_token);
     output.writeFieldEnd();
   }
-  if (this.row_filter) {
+  if (this.row_filter !== null) {
     output.writeFieldBegin('row_filter', Thrift.Type.LIST, 6);
     output.writeListBegin(Thrift.Type.STRUCT, this.row_filter.length);
     for (var iter39 in this.row_filter)
@@ -1495,7 +1495,7 @@
     output.writeListEnd();
     output.writeFieldEnd();
   }
-  if (this.count) {
+  if (this.count !== null) {
     output.writeFieldBegin('count', Thrift.Type.I32, 5);
     output.writeI32(this.count);
     output.writeFieldEnd();
